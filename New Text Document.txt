First, we need to properly build Django APIs using Django REST Framework (DRF) â€” it's perfect for connecting with React.

âœ… Install DRF:

bash
Copy
Edit
pip install djangorestframework
âœ… Add 'rest_framework' to your settings.py:

python
Copy
Edit
INSTALLED_APPS = [
    ...
    'rest_framework',
]
âœ… Create a Student model in myapp/models.py:

python
Copy
Edit
from django.db import models

class Student(models.Model):
    name = models.CharField(max_length=100)
    student_class = models.CharField(max_length=50)
    subject = models.CharField(max_length=100)

    def __str__(self):
        return self.name
âœ… Make migrations:

bash
Copy
Edit
python manage.py makemigrations
python manage.py migrate
âœ… Create a serializer in myapp/serializers.py:

python
Copy
Edit
from rest_framework import serializers
from .models import Student

class StudentSerializer(serializers.ModelSerializer):
    class Meta:
        model = Student
        fields = '__all__'
âœ… Create API views in myapp/views.py:

python
Copy
Edit
from rest_framework import viewsets
from .models import Student
from .serializers import StudentSerializer

class StudentViewSet(viewsets.ModelViewSet):
    queryset = Student.objects.all()
    serializer_class = StudentSerializer
âœ… Connect routes in myapp/urls.py:

python
Copy
Edit
from django.urls import path, include
from rest_framework.routers import DefaultRouter
from .views import StudentViewSet

router = DefaultRouter()
router.register(r'students', StudentViewSet)

urlpatterns = [
    path('', include(router.urls)),
]
âœ… In project/urls.py:

python
Copy
Edit
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('myapp.urls')),
]
Now if you run:

bash
Copy
Edit
python manage.py runserver
You will have a full REST API at:

GET /students/ â†’ List all students

POST /students/ â†’ Create a new student

PUT /students/<id>/ â†’ Update a student

DELETE /students/<id>/ â†’ Delete a student

Backend ready! ðŸŽ¯

2. React Frontend (API calling)
âœ… Install Axios for API requests:

bash
Copy
Edit
npm install axios
âœ… Example React functions for CRUD:

javascript
Copy
Edit
import axios from 'axios';

const API_URL = 'http://127.0.0.1:8000/students/';

// CREATE
export const createStudent = (studentData) => {
    return axios.post(API_URL, studentData);
}

// READ
export const getStudents = () => {
    return axios.get(API_URL);
}

// UPDATE
export const updateStudent = (id, updatedData) => {
    return axios.put(`${API_URL}${id}/`, updatedData);
}

// DELETE
export const deleteStudent = (id) => {
    return axios.delete(`${API_URL}${id}/`);
}
âœ… Example usage in your React component:

javascript
Copy
Edit
import { useEffect, useState } from 'react';
import { getStudents, createStudent, updateStudent, deleteStudent } from './api'; // your API functions

function StudentList() {
    const [students, setStudents] = useState([]);

    useEffect(() => {
        fetchStudents();
    }, []);

    const fetchStudents = async () => {
        const response = await getStudents();
        setStudents(response.data);
    }

    const handleCreate = async () => {
        await createStudent({ name: 'Alice', student_class: '8th', subject: 'Science' });
        fetchStudents();
    }

    const handleUpdate = async (id) => {
        await updateStudent(id, { name: 'Alice Updated', student_class: '8th', subject: 'Biology' });
        fetchStudents();
    }

    const handleDelete = async (id) => {
        await deleteStudent(id);
        fetchStudents();
    }

    return (
        <div>
            <h1>Student List</h1>
            <button onClick={handleCreate}>Add Student</button>
            <ul>
                {students.map(student => (
                    <li key={student.id}>
                        {student.name} - {student.student_class} - {student.subject}
                        <button onClick={() => handleUpdate(student.id)}>Edit</button>
                        <button onClick={() => handleDelete(student.id)}>Delete</button>
                    </li>
                ))}
            </ul>
        </div>
    );
}

export default StudentList;
ðŸŽ‰ Now you have:
Django backend for CRUD

React frontend to Create, Edit, Delete, List students

Real-time updates after every action!

Would you like me to also show a full Form UI (with inputs for name, class, subject) instead of just hardcoded buttons? ðŸš€ (it looks awesome!)
Should I? ðŸ”¥